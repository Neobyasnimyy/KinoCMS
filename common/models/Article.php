<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "article".
 *
 * @property integer $id
 * @property string $article_title
 * @property string $article_data
 * @property string $article_description
 * @property string $article_video_url
 * @property string $article_image_name
 * @property integer $article_is_active
 * @property string $article_seo_url
 * @property string $article_seo_title
 * @property string $article_seo_keywords
 * @property string $article_seo_description
 */
class Article extends \yii\db\ActiveRecord
{
    public $del_img = false;
    public $image;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['article_title'], 'required', 'message' => 'Поле должно быть заполненно'],
            [['article_data'], 'date', 'format' => 'yyyy-mm-dd'],
            [['article_description', 'article_seo_description'], 'string'],
            ['article_is_active', 'integer', 'min' => 0, 'max' => 1],
            ['article_is_active', 'default', 'value' => '1'],
            [['article_title', 'article_image_name', 'article_video_url', 'article_seo_url', 'article_seo_title', 'article_seo_keywords'], 'string', 'max' => 255],
            [['del_img'], 'boolean'],
            [['image'],
                'file',
                'extensions' => 'png, jpg, gif, bmp',
//                'skipOnEmpty' => false, // обязательная загрузка файла
                'maxSize' => 1024 * 1024 * 3,
                'tooBig' => "Файл «{file}» слишком большой. Размер не должен превышать 3 MB.",
                'mimeTypes' => ['image/gif', 'image/jpeg', 'image/png']
            ],
        ];
    }

    public function __construct()
    {
        $this->article_is_active = 1;
        parent::__construct();
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'article_title' => 'Название новости',
            'article_data' => 'Дата публикации',
            'article_description' => 'Описание',
            'article_video_url' => 'Ссылка на видео',
            'article_image_name' => 'Главная картинка',
            'article_is_active' => 'Статус',
            'article_seo_url' => 'Url',
            'article_seo_title' => 'Title',
            'article_seo_keywords' => 'Keywords',
            'article_seo_description' => 'Description',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getImages()
    {
        return $this->hasMany(ArticleImages::className(), ['article_id' => 'id']);
    }

    /**
     * @return mixed
     */
    public function getStatus()
    {
        $list = self::getStatusList();
        return $list[$this->article_is_active];
    }

    /**
     * @return array
     */
    public static function getStatusList()
    {
        return [0 => 'ВЫКЛ', 1 => 'ВКЛ'];
    }


    public function beforeDelete()
    {
        $path = Yii::getAlias('@upImages') . "/article/{$this->id}";
        if (file_exists($path)) {
            Yii::$app->mycomponent->myDeleteFile($path);
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }


    public function deleteImage()
    {
        $path = Yii::getAlias('@upImages') . "/article/{$this->id}/" . $this->article_image_name;
        if (!empty($this->article_image_name) and (is_file($path))) {
            Yii::$app->mycomponent->myDeleteFile($path);
        }
        $this->article_image_name=null;
    }

    public function beforeSave($insert)
    {
        if($this->del_img){
            $this->deleteImage();
        }
        if ($this->image != null) {
            $this->uploadImage();
        }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    // после сохранения модели переносим картинку в папку модели
    public function afterSave($insert, $changedAttributes)
    {
        $dir = Yii::getAlias('@upImages') . "/article/{$this->id}";

        if (!file_exists($dir)) {
            mkdir($dir, 0775, true);
        }

        $old_name = Yii::getAlias('@upImages') . "/temp/{$this->article_image_name}";
        $new_name = $dir.'/'.$this->article_image_name;
        if (isset($this->image) && file_exists($old_name)) {
            rename($old_name, $new_name);
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }


    // загружаем картинку во временную
    public function uploadImage()
    {
        if ($this->validate()) {
            if (isset($this->article_image_name)) {
                $this->deleteImage();
            }
            if (!file_exists(Yii::getAlias(
                    '@upImages') . "/temp")
            ) {
                mkdir(Yii::getAlias('@upImages') . "/temp", 0775, true);
            }
            $this->image->name = rand(0, 9999) . "-" . date('YmdHi', time()) . '.' . $this->image->extension;
            $this->article_image_name = $this->image->name;
            $this->image->saveAs(Yii::getAlias('@upImages')
                . "/temp/{$this->image->name}");
            return true;
        } else {
            return false;
        }
    }


}
